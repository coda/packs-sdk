/* eslint-disable */
/**
 * @file TypeScript SDK for Coda API. This file is autogenerated from the API's OpenAPI specification,
 * available at https://coda.io/developers/apis/v1
 *
 * Version: v1
 * Hash: c17f33bab1c1496bf73356d09380fa0a04e074f97741adc801db545ea8db0026
 */

import 'es6-promise/auto';
import 'isomorphic-fetch';
import {withQueryParams} from '../url';
import * as types from './v1';

export class Client {
  private readonly protocolAndHost: string;
  private readonly apiKey: string;
  private readonly userAgent: string;

  constructor(protocolAndHost: string, apiKey: string, userAgent: string = 'Coda-Typescript-API-Client') {
    this.protocolAndHost = protocolAndHost;
    this.apiKey = apiKey;
    this.userAgent = userAgent;
  }

  async listCategories(params: {} = {}): Promise<types.PublicApiDocCategoryList> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/categories`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listDocs(
    params: {
      isOwner?: boolean;
      isPublished?: boolean;
      query?: string;
      sourceDoc?: string;
      isStarred?: boolean;
      inGallery?: boolean;
      workspaceId?: string;
      folderId?: string;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiDocList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs`, pageToken ? {pageToken} : rest);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async createDoc(params: {} = {}, payload: types.PublicApiDocCreate): Promise<types.PublicApiDoc> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async getDoc(docId: string, params: {} = {}): Promise<types.PublicApiDoc> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async deleteDoc(docId: string, params: {} = {}): Promise<types.PublicApiDocDelete> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'DELETE',
    });
    return response.json();
  }

  async getSharingMetadata(docId: string, params: {} = {}): Promise<types.PublicApiAcl> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/metadata`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async getPermissions(docId: string, params: {} = {}): Promise<types.PublicApiAcl> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async addPermission(
    docId: string,
    params: {} = {},
    payload: types.PublicApiAddPermissionRequest,
  ): Promise<types.PublicApiAddPermissionResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async deletePermission(
    docId: string,
    permissionId: string,
    params: {} = {},
  ): Promise<types.PublicApiDeletePermissionResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions/${permissionId}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'DELETE',
    });
    return response.json();
  }

  async publishDoc(
    docId: string,
    params: {} = {},
    payload: types.PublicApiDocPublish,
  ): Promise<types.PublicApiPublishResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/publish`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'PUT',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async unpublishDoc(docId: string, params: {} = {}): Promise<types.PublicApiUnpublishResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/publish`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'DELETE',
    });
    return response.json();
  }

  async listPages(
    docId: string,
    params: {
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiPageList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/pages`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async getPage(docId: string, pageIdOrName: string, params: {} = {}): Promise<types.PublicApiPage> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/pages/${pageIdOrName}`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async updatePage(
    docId: string,
    pageIdOrName: string,
    params: {} = {},
    payload: types.PublicApiPageUpdate,
  ): Promise<types.PublicApiPageUpdateResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/pages/${pageIdOrName}`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'PUT',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async listTables(
    docId: string,
    params: {
      sortBy?: types.PublicApiSortBy;
      tableTypes?: string;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiTableList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async getTable(docId: string, tableIdOrName: string, params: {} = {}): Promise<types.PublicApiTable> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listColumns(
    docId: string,
    tableIdOrName: string,
    params: {
      visibleOnly?: boolean;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiColumnList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/columns`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listRows(
    docId: string,
    tableIdOrName: string,
    params: {
      query?: string;
      sortBy?: types.PublicApiRowsSortBy;
      useColumnNames?: boolean;
      valueFormat?: types.PublicApiValueFormat;
      visibleOnly?: boolean;
      syncToken?: string;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiRowList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async upsertRows(
    docId: string,
    tableIdOrName: string,
    params: {
      disableParsing?: boolean;
    } = {},
    payload: types.PublicApiRowsUpsert,
  ): Promise<types.PublicApiRowsUpsertResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async deleteRows(
    docId: string,
    tableIdOrName: string,
    params: {} = {},
    payload: types.PublicApiRowsDelete,
  ): Promise<types.PublicApiRowsDeleteResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'DELETE',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async getRow(
    docId: string,
    tableIdOrName: string,
    rowIdOrName: string,
    params: {
      useColumnNames?: boolean;
      valueFormat?: types.PublicApiValueFormat;
    } = {},
  ): Promise<types.PublicApiRowDetail> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async updateRow(
    docId: string,
    tableIdOrName: string,
    rowIdOrName: string,
    params: {
      disableParsing?: boolean;
    } = {},
    payload: types.PublicApiRowUpdate,
  ): Promise<types.PublicApiRowUpdateResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'PUT',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async deleteRow(
    docId: string,
    tableIdOrName: string,
    rowIdOrName: string,
    params: {} = {},
  ): Promise<types.PublicApiRowDeleteResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'DELETE',
    });
    return response.json();
  }

  async pushButton(
    docId: string,
    tableIdOrName: string,
    rowIdOrName: string,
    columnIdOrName: string,
    params: {} = {},
  ): Promise<types.PublicApiPushButtonResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}/buttons/${columnIdOrName}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
    });
    return response.json();
  }

  async getColumn(
    docId: string,
    tableIdOrName: string,
    columnIdOrName: string,
    params: {} = {},
  ): Promise<types.PublicApiColumnDetail> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/columns/${columnIdOrName}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listFormulas(
    docId: string,
    params: {
      sortBy?: types.PublicApiSortBy;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiFormulaList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/formulas`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async getFormula(docId: string, formulaIdOrName: string, params: {} = {}): Promise<types.PublicApiFormula> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/formulas/${formulaIdOrName}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listControls(
    docId: string,
    params: {
      sortBy?: types.PublicApiSortBy;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiControlList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/controls`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async getControl(docId: string, controlIdOrName: string, params: {} = {}): Promise<types.PublicApiControl> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/docs/${docId}/controls/${controlIdOrName}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async whoami(params: {} = {}): Promise<types.PublicApiUser> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/whoami`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async resolveBrowserLink(
    url: string,
    params: {
      degradeGracefully?: boolean;
    } = {},
  ): Promise<types.PublicApiApiLink> {
    const allParams = {
      ...params,
      url,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/resolveBrowserLink`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async getMutationStatus(requestId: string, params: {} = {}): Promise<types.PublicApiMutationStatus> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/mutationStatus/${requestId}`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listDocAnalytics(
    params: {
      isPublished?: boolean;
      sinceDate?: string;
      untilDate?: string;
      scale?: types.PublicApiDocAnalyticsScale;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiDocAnalyticsCollection> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/analytics/docs`, pageToken ? {pageToken} : rest);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listWorkspaceMembers(
    workspaceId: string,
    params: {
      includedRoles?: string;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiWorkspaceMembersList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/users`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async changeUserRole(
    workspaceId: string,
    params: {} = {},
    payload: types.PublicApiChangeRole,
  ): Promise<types.PublicApiChangeRoleResult> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/users/role`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async listWorkspaceRoleActivity(
    workspaceId: string,
    params: {
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiGetWorkspaceRoleActivity> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/roles`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listPacks(
    params: {
      accessType?: types.PublicApiPackAccessType;
      sortBy?: types.PublicApiPacksSortBy;
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiPackSummaryList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs`, pageToken ? {pageToken} : rest);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async createPack(
    params: {} = {},
    payload: types.PublicApiCreatePackRequest,
  ): Promise<types.PublicApiCreatePackResponse> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async getPack(packId: number, params: {} = {}): Promise<types.PublicApiPack> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async updatePack(
    packId: number,
    params: {} = {},
    payload: types.PublicApiUpdatePackRequest,
  ): Promise<types.PublicApiPack> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'PATCH',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async listPackVersions(
    packId: number,
    params: {
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiPackVersionList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/packs/${packId}/versions`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async registerPackVersion(
    packId: number,
    packVersion: string,
    params: {} = {},
    payload: types.PublicApiRegisterPackVersionRequest,
  ): Promise<types.PublicApiPackVersionUploadInfo> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/register`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async packVersionUploadComplete(
    packId: number,
    packVersion: string,
    params: {} = {},
    payload: types.PublicApiCreatePackVersionRequest,
  ): Promise<types.PublicApiCreatePackVersionResponse> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/uploadComplete`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async createPackRelease(
    packId: number,
    params: {} = {},
    payload: types.PublicApiCreatePackReleaseRequest,
  ): Promise<types.PublicApiPackRelease> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/releases`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async listPackReleases(
    packId: number,
    params: {
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiPackReleaseList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/packs/${packId}/releases`,
      pageToken ? {pageToken} : rest,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async setPackLiveVersion(
    packId: number,
    params: {} = {},
    payload: types.PublicApiSetPackLiveVersionRequest,
  ): Promise<types.PublicApiSetPackLiveVersionResponse> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/liveVersion`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'PUT',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async setPackSystemConnection(
    packId: number,
    params: {} = {},
    payload: types.PublicApiSetPackSystemConnectionRequest,
  ): Promise<types.PublicApiPackSystemConnection> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'PUT',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async deletePackSystemConnection(
    packId: number,
    params: {} = {},
  ): Promise<types.PublicApiDeletePackSystemConnectionResponse> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'DELETE',
    });
    return response.json();
  }

  async getPackSystemConnection(packId: number, params: {} = {}): Promise<types.PublicApiPackSystemConnection> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async getPackPermissions(packId: number, params: {} = {}): Promise<types.PublicApiPackPermissionList> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/permissions`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async addPackPermission(
    packId: number,
    params: {} = {},
    payload: types.PublicApiAddPackPermissionRequest,
  ): Promise<types.PublicApiAddPackPermissionResponse> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/permissions`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async deletePackPermission(
    packId: number,
    permissionId: string,
    params: {} = {},
  ): Promise<types.PublicApiDeletePackPermissionResponse> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/packs/${packId}/permissions/${permissionId}`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'DELETE',
    });
    return response.json();
  }

  async uploadPackAsset(
    packId: number,
    params: {} = {},
    payload: types.PublicApiUploadPackAssetRequest,
  ): Promise<types.PublicApiPackAssetUploadInfo> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/uploadAsset`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async uploadPackSourceCode(
    packId: number,
    params: {} = {},
    payload: types.PublicApiUploadPackSourceCodeRequest,
  ): Promise<types.PublicApiPackSourceCodeUploadInfo> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/uploadSourceCode`, allParams);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async packAssetUploadComplete(
    packId: number,
    packAssetId: string,
    packAssetType: types.PublicApiPackAssetType,
    params: {} = {},
  ): Promise<types.PublicApiPackAssetUploadCompleteResponse> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/packs/${packId}/assets/${packAssetId}/assetType/${packAssetType}/uploadComplete`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
    });
    return response.json();
  }

  async packSourceCodeUploadComplete(
    packId: number,
    packVersion: string,
    params: {} = {},
    payload: types.PublicApiPackSourceCodeUploadCompleteRequest,
  ): Promise<types.PublicApiPackSourceCodeUploadCompleteResponse> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/sourceCode/uploadComplete`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'POST',
      body: JSON.stringify(payload),
    });
    return response.json();
  }

  async getPackSourceCode(
    packId: number,
    packVersion: string,
    params: {} = {},
  ): Promise<types.PublicApiPackSourceCodeInfo> {
    const allParams = {
      ...params,
    };
    const codaUrl = withQueryParams(
      `${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/sourceCode`,
      allParams,
    );
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }

  async listPackListings(
    params: {
      limit?: number;
      pageToken?: string;
    } = {},
  ): Promise<types.PublicApiPackListingList> {
    const allParams = {
      ...params,
    };
    const {pageToken, ...rest} = allParams;
    const codaUrl = withQueryParams(`${this.protocolAndHost}/apis/v1/packs/listings`, pageToken ? {pageToken} : rest);
    const response = await fetch(codaUrl, {
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': this.userAgent,
      },
      method: 'GET',
    });
    return response.json();
  }
}
