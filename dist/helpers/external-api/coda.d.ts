/**
 * @file TypeScript SDK for Coda API. This file is autogenerated from the API's OpenAPI specification,
 * available at https://coda.io/developers/apis/v1
 *
 * Version: v1
 * Hash: 3cb65a92b168c432b6eb8cad28cd0cc16911c3536d86f2d256c7ddb6007de8ad
 */
import 'es6-promise/auto';
import 'cross-fetch/polyfill';
import * as types from './v1';
export declare class ResponseError extends Error {
    response: Response;
    constructor(response: Response);
}
export declare function isResponseError(err: any): err is ResponseError;
export declare class Client {
    private readonly protocolAndHost;
    private readonly apiToken;
    private readonly userAgent;
    constructor({ apiToken, protocolAndHost, userAgent, }: {
        apiToken: string;
        protocolAndHost?: string;
        userAgent?: string;
    });
    private _makeRequest;
    listCategories(params?: {}): Promise<types.PublicApiDocCategoryList>;
    listDocs(params?: {
        isOwner?: boolean;
        isPublished?: boolean;
        query?: string;
        sourceDoc?: string;
        isStarred?: boolean;
        inGallery?: boolean;
        workspaceId?: string;
        folderId?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiDocList>;
    createDoc(params: {} | undefined, payload: types.PublicApiDocCreate): Promise<types.PublicApiDoc>;
    getDocsCount(params?: {
        isPublished?: boolean;
        isOwner?: boolean;
        workspaceId?: string;
    }): Promise<types.PublicApiCountResponse>;
    getDoc(docId: string, params?: {}): Promise<types.PublicApiDoc>;
    deleteDoc(docId: string, params?: {}): Promise<types.PublicApiDocDelete>;
    getSharingMetadata(docId: string, params?: {}): Promise<types.PublicApiAcl>;
    getPermissions(docId: string, params?: {}): Promise<types.PublicApiAcl>;
    addPermission(docId: string, params: {} | undefined, payload: types.PublicApiAddPermissionRequest): Promise<types.PublicApiAddPermissionResult>;
    deletePermission(docId: string, permissionId: string, params?: {}): Promise<types.PublicApiDeletePermissionResult>;
    publishDoc(docId: string, params: {} | undefined, payload: types.PublicApiDocPublish): Promise<types.PublicApiPublishResult>;
    unpublishDoc(docId: string, params?: {}): Promise<types.PublicApiUnpublishResult>;
    listPages(docId: string, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPageList>;
    getPage(docId: string, pageIdOrName: string, params?: {}): Promise<types.PublicApiPage>;
    updatePage(docId: string, pageIdOrName: string, params: {} | undefined, payload: types.PublicApiPageUpdate): Promise<types.PublicApiPageUpdateResult>;
    listTables(docId: string, params?: {
        sortBy?: types.PublicApiSortBy;
        tableTypes?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiTableList>;
    getTable(docId: string, tableIdOrName: string, params?: {
        useUpdatedTableLayouts?: boolean;
    }): Promise<types.PublicApiTable>;
    listColumns(docId: string, tableIdOrName: string, params?: {
        visibleOnly?: boolean;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiColumnList>;
    listRows(docId: string, tableIdOrName: string, params?: {
        query?: string;
        sortBy?: types.PublicApiRowsSortBy;
        useColumnNames?: boolean;
        valueFormat?: types.PublicApiValueFormat;
        visibleOnly?: boolean;
        syncToken?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiRowList>;
    upsertRows(docId: string, tableIdOrName: string, params: {
        disableParsing?: boolean | undefined;
    } | undefined, payload: types.PublicApiRowsUpsert): Promise<types.PublicApiRowsUpsertResult>;
    deleteRows(docId: string, tableIdOrName: string, params: {} | undefined, payload: types.PublicApiRowsDelete): Promise<types.PublicApiRowsDeleteResult>;
    getRow(docId: string, tableIdOrName: string, rowIdOrName: string, params?: {
        useColumnNames?: boolean;
        valueFormat?: types.PublicApiValueFormat;
    }): Promise<types.PublicApiRowDetail>;
    updateRow(docId: string, tableIdOrName: string, rowIdOrName: string, params: {
        disableParsing?: boolean | undefined;
    } | undefined, payload: types.PublicApiRowUpdate): Promise<types.PublicApiRowUpdateResult>;
    deleteRow(docId: string, tableIdOrName: string, rowIdOrName: string, params?: {}): Promise<types.PublicApiRowDeleteResult>;
    pushButton(docId: string, tableIdOrName: string, rowIdOrName: string, columnIdOrName: string, params?: {}): Promise<types.PublicApiPushButtonResult>;
    getColumn(docId: string, tableIdOrName: string, columnIdOrName: string, params?: {}): Promise<types.PublicApiColumnDetail>;
    listFormulas(docId: string, params?: {
        sortBy?: types.PublicApiSortBy;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiFormulaList>;
    getFormula(docId: string, formulaIdOrName: string, params?: {}): Promise<types.PublicApiFormula>;
    listControls(docId: string, params?: {
        sortBy?: types.PublicApiSortBy;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiControlList>;
    getControl(docId: string, controlIdOrName: string, params?: {}): Promise<types.PublicApiControl>;
    whoami(params?: {}): Promise<types.PublicApiUser>;
    resolveBrowserLink(url: string, params?: {
        degradeGracefully?: boolean;
    }): Promise<types.PublicApiApiLink>;
    getMutationStatus(requestId: string, params?: {}): Promise<types.PublicApiMutationStatus>;
    triggerWebhookAutomation(docId: string, ruleId: string, params: {} | undefined, payload: types.PublicApiWebhookTriggerPayload): Promise<types.PublicApiWebhookTriggerResult>;
    listDocAnalytics(params?: {
        isPublished?: boolean;
        sinceDate?: string;
        untilDate?: string;
        scale?: types.PublicApiAnalyticsScale;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiDocAnalyticsCollection>;
    listDocAnalyticsDeprecated(params?: {
        isPublished?: boolean;
        sinceDate?: string;
        untilDate?: string;
        scale?: types.PublicApiAnalyticsScale;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiDeprecatedDocAnalyticsCollection>;
    listDocAnalyticsSummary(params?: {
        isPublished?: boolean;
        sinceDate?: string;
        untilDate?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiDocAnalyticsSummary>;
    listPackAnalytics(params?: {
        packIds?: string;
        workspaceId?: string;
        sinceDate?: string;
        untilDate?: string;
        scale?: types.PublicApiAnalyticsScale;
        orderBy?: types.PublicApiPackAnalyticsOrderBy;
        direction?: types.PublicApiSortDirection;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackAnalyticsCollection>;
    listPackAnalyticsSummary(params?: {
        packIds?: string;
        workspaceId?: string;
        sinceDate?: string;
        untilDate?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackAnalyticsSummary>;
    listPackFormulaAnalytics(packId: number, params?: {
        sinceDate?: string;
        untilDate?: string;
        scale?: types.PublicApiAnalyticsScale;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackFormulaAnalyticsCollection>;
    listWorkspaceMembers(workspaceId: string, params?: {
        includedRoles?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiWorkspaceMembersList>;
    changeUserRole(workspaceId: string, params: {} | undefined, payload: types.PublicApiChangeRole): Promise<types.PublicApiChangeRoleResult>;
    listWorkspaceRoleActivity(workspaceId: string, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiGetWorkspaceRoleActivity>;
    listPacks(params?: {
        accessType?: types.PublicApiPackAccessType;
        sortBy?: types.PublicApiPacksSortBy;
        onlyWorkspaceId?: string;
        excludePublicPacks?: boolean;
        excludeIndividualAcls?: boolean;
        excludeWorkspaceAcls?: boolean;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackSummaryList>;
    createPack(params: {} | undefined, payload: types.PublicApiCreatePackRequest): Promise<types.PublicApiCreatePackResponse>;
    getPack(packId: number, params?: {}): Promise<types.PublicApiPack>;
    updatePack(packId: number, params: {} | undefined, payload: types.PublicApiUpdatePackRequest): Promise<types.PublicApiPack>;
    deletePack(packId: number, params?: {}): Promise<types.PublicApiDeletePackResponse>;
    listPackVersions(packId: number, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackVersionList>;
    getNextPackVersion(packId: number, params: {} | undefined, payload: types.PublicApiGetNextPackVersionRequest): Promise<types.PublicApiNextPackVersionInfo>;
    getPackVersionDiffs(packId: number, basePackVersion: string, targetPackVersion: string, params?: {}): Promise<types.PublicApiPackVersionDiffs>;
    registerPackVersion(packId: number, packVersion: string, params: {} | undefined, payload: types.PublicApiRegisterPackVersionRequest): Promise<types.PublicApiPackVersionUploadInfo>;
    packVersionUploadComplete(packId: number, packVersion: string, params: {} | undefined, payload: types.PublicApiCreatePackVersionRequest): Promise<types.PublicApiCreatePackVersionResponse>;
    createPackRelease(packId: number, params: {} | undefined, payload: types.PublicApiCreatePackReleaseRequest): Promise<types.PublicApiPackRelease>;
    listPackReleases(packId: number, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackReleaseList>;
    setPackOauthConfig(packId: number, params: {} | undefined, payload: types.PublicApiSetPackOauthConfigRequest): Promise<types.PublicApiPackOauthConfigMetadata>;
    getPackOauthConfig(packId: number, params?: {}): Promise<types.PublicApiPackOauthConfigMetadata>;
    setPackSystemConnection(packId: number, params: {} | undefined, payload: types.PublicApiSetPackSystemConnectionRequest): Promise<types.PublicApiPackSystemConnectionMetadata>;
    patchPackSystemConnection(packId: number, params: {} | undefined, payload: types.PublicApiPatchPackSystemConnectionRequest): Promise<types.PublicApiPackSystemConnectionMetadata>;
    getPackSystemConnection(packId: number, params?: {}): Promise<types.PublicApiPackSystemConnectionMetadata>;
    getPackPermissions(packId: number, params?: {}): Promise<types.PublicApiPackPermissionList>;
    addPackPermission(packId: number, params: {} | undefined, payload: types.PublicApiAddPackPermissionRequest): Promise<types.PublicApiAddPackPermissionResponse>;
    deletePackPermission(packId: number, permissionId: string, params?: {}): Promise<types.PublicApiDeletePackPermissionResponse>;
    listPackMakers(packId: number, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiListPackMakersResponse>;
    addPackMaker(packId: number, params: {} | undefined, payload: types.PublicApiAddPackMakerRequest): Promise<types.PublicApiAddPackMakerResponse>;
    deletePackMaker(packId: number, loginId: string, params?: {}): Promise<types.PublicApiAddPackMakerResponse>;
    listPackCategories(packId: number, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiListPackCategoriesResponse>;
    addPackCategory(packId: number, params: {} | undefined, payload: types.PublicApiAddPackCategoryRequest): Promise<types.PublicApiAddPackCategoryResponse>;
    deletePackCategory(packId: number, categoryName: string, params?: {}): Promise<types.PublicApiDeletePackCategoryResponse>;
    uploadPackAsset(packId: number, params: {} | undefined, payload: types.PublicApiUploadPackAssetRequest): Promise<types.PublicApiPackAssetUploadInfo>;
    uploadPackSourceCode(packId: number, params: {} | undefined, payload: types.PublicApiUploadPackSourceCodeRequest): Promise<types.PublicApiPackSourceCodeUploadInfo>;
    packAssetUploadComplete(packId: number, packAssetId: string, packAssetType: types.PublicApiPackAssetType, params?: {}): Promise<types.PublicApiPackAssetUploadCompleteResponse>;
    packSourceCodeUploadComplete(packId: number, packVersion: string, params: {} | undefined, payload: types.PublicApiPackSourceCodeUploadCompleteRequest): Promise<types.PublicApiPackSourceCodeUploadCompleteResponse>;
    getPackSourceCode(packId: number, packVersion: string, params?: {}): Promise<types.PublicApiPackSourceCodeInfo>;
    listPackListings(params?: {
        packAccessTypes?: types.PublicApiPackAccessTypes;
        packIds?: string;
        onlyWorkspaceId?: string;
        excludePublicPacks?: boolean;
        excludeWorkspaceAcls?: boolean;
        excludeIndividualAcls?: boolean;
        orderBy?: types.PublicApiPackListingsSortBy;
        direction?: types.PublicApiSortDirection;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackListingList>;
    getPackListing(packId: number, params?: {
        workspaceId?: string;
    }): Promise<types.PublicApiPackListingDetail>;
    listPackLogs(packId: number, docId: string, params?: {
        logTypes?: string;
        beforeTimestamp?: string;
        afterTimestamp?: string;
        order?: string;
        q?: string;
        requestIds?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackLogsList>;
    listGroupedPackLogs(packId: number, docId: string, params?: {
        beforeTimestamp?: string;
        afterTimestamp?: string;
        order?: string;
        q?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiGroupedPackLogsList>;
    getPackCount(params?: {
        isPublished?: boolean;
        accessType?: types.PublicApiPackAccessType;
        excludePublicPacks?: boolean;
    }): Promise<types.PublicApiCountResponse>;
}
