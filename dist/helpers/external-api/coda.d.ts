/**
 * @file TypeScript SDK for Coda API. This file is autogenerated from the API's OpenAPI specification,
 * available at https://coda.io/developers/apis/v1
 *
 * Version: v1
 * Hash: c17f33bab1c1496bf73356d09380fa0a04e074f97741adc801db545ea8db0026
 */
import 'es6-promise/auto';
import 'isomorphic-fetch';
import * as types from './v1';
export declare class Client {
    private readonly protocolAndHost;
    private readonly apiKey;
    private readonly userAgent;
    constructor(protocolAndHost: string, apiKey: string, userAgent?: string);
    listCategories(params?: {}): Promise<types.PublicApiDocCategoryList>;
    listDocs(params?: {
        isOwner?: boolean;
        isPublished?: boolean;
        query?: string;
        sourceDoc?: string;
        isStarred?: boolean;
        inGallery?: boolean;
        workspaceId?: string;
        folderId?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiDocList>;
    createDoc(params: {} | undefined, payload: types.PublicApiDocCreate): Promise<types.PublicApiDoc>;
    getDoc(docId: string, params?: {}): Promise<types.PublicApiDoc>;
    deleteDoc(docId: string, params?: {}): Promise<types.PublicApiDocDelete>;
    getSharingMetadata(docId: string, params?: {}): Promise<types.PublicApiAcl>;
    getPermissions(docId: string, params?: {}): Promise<types.PublicApiAcl>;
    addPermission(docId: string, params: {} | undefined, payload: types.PublicApiAddPermissionRequest): Promise<types.PublicApiAddPermissionResult>;
    deletePermission(docId: string, permissionId: string, params?: {}): Promise<types.PublicApiDeletePermissionResult>;
    publishDoc(docId: string, params: {} | undefined, payload: types.PublicApiDocPublish): Promise<types.PublicApiPublishResult>;
    unpublishDoc(docId: string, params?: {}): Promise<types.PublicApiUnpublishResult>;
    listPages(docId: string, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPageList>;
    getPage(docId: string, pageIdOrName: string, params?: {}): Promise<types.PublicApiPage>;
    updatePage(docId: string, pageIdOrName: string, params: {} | undefined, payload: types.PublicApiPageUpdate): Promise<types.PublicApiPageUpdateResult>;
    listTables(docId: string, params?: {
        sortBy?: types.PublicApiSortBy;
        tableTypes?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiTableList>;
    getTable(docId: string, tableIdOrName: string, params?: {}): Promise<types.PublicApiTable>;
    listColumns(docId: string, tableIdOrName: string, params?: {
        visibleOnly?: boolean;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiColumnList>;
    listRows(docId: string, tableIdOrName: string, params?: {
        query?: string;
        sortBy?: types.PublicApiRowsSortBy;
        useColumnNames?: boolean;
        valueFormat?: types.PublicApiValueFormat;
        visibleOnly?: boolean;
        syncToken?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiRowList>;
    upsertRows(docId: string, tableIdOrName: string, params: {
        disableParsing?: boolean | undefined;
    } | undefined, payload: types.PublicApiRowsUpsert): Promise<types.PublicApiRowsUpsertResult>;
    deleteRows(docId: string, tableIdOrName: string, params: {} | undefined, payload: types.PublicApiRowsDelete): Promise<types.PublicApiRowsDeleteResult>;
    getRow(docId: string, tableIdOrName: string, rowIdOrName: string, params?: {
        useColumnNames?: boolean;
        valueFormat?: types.PublicApiValueFormat;
    }): Promise<types.PublicApiRowDetail>;
    updateRow(docId: string, tableIdOrName: string, rowIdOrName: string, params: {
        disableParsing?: boolean | undefined;
    } | undefined, payload: types.PublicApiRowUpdate): Promise<types.PublicApiRowUpdateResult>;
    deleteRow(docId: string, tableIdOrName: string, rowIdOrName: string, params?: {}): Promise<types.PublicApiRowDeleteResult>;
    pushButton(docId: string, tableIdOrName: string, rowIdOrName: string, columnIdOrName: string, params?: {}): Promise<types.PublicApiPushButtonResult>;
    getColumn(docId: string, tableIdOrName: string, columnIdOrName: string, params?: {}): Promise<types.PublicApiColumnDetail>;
    listFormulas(docId: string, params?: {
        sortBy?: types.PublicApiSortBy;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiFormulaList>;
    getFormula(docId: string, formulaIdOrName: string, params?: {}): Promise<types.PublicApiFormula>;
    listControls(docId: string, params?: {
        sortBy?: types.PublicApiSortBy;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiControlList>;
    getControl(docId: string, controlIdOrName: string, params?: {}): Promise<types.PublicApiControl>;
    whoami(params?: {}): Promise<types.PublicApiUser>;
    resolveBrowserLink(url: string, params?: {
        degradeGracefully?: boolean;
    }): Promise<types.PublicApiApiLink>;
    getMutationStatus(requestId: string, params?: {}): Promise<types.PublicApiMutationStatus>;
    listDocAnalytics(params?: {
        isPublished?: boolean;
        sinceDate?: string;
        untilDate?: string;
        scale?: types.PublicApiDocAnalyticsScale;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiDocAnalyticsCollection>;
    listWorkspaceMembers(workspaceId: string, params?: {
        includedRoles?: string;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiWorkspaceMembersList>;
    changeUserRole(workspaceId: string, params: {} | undefined, payload: types.PublicApiChangeRole): Promise<types.PublicApiChangeRoleResult>;
    listWorkspaceRoleActivity(workspaceId: string, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiGetWorkspaceRoleActivity>;
    listPacks(params?: {
        accessType?: types.PublicApiPackAccessType;
        sortBy?: types.PublicApiPacksSortBy;
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackSummaryList>;
    createPack(params: {} | undefined, payload: types.PublicApiCreatePackRequest): Promise<types.PublicApiCreatePackResponse>;
    getPack(packId: number, params?: {}): Promise<types.PublicApiPack>;
    updatePack(packId: number, params: {} | undefined, payload: types.PublicApiUpdatePackRequest): Promise<types.PublicApiPack>;
    listPackVersions(packId: number, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackVersionList>;
    registerPackVersion(packId: number, packVersion: string, params: {} | undefined, payload: types.PublicApiRegisterPackVersionRequest): Promise<types.PublicApiPackVersionUploadInfo>;
    packVersionUploadComplete(packId: number, packVersion: string, params: {} | undefined, payload: types.PublicApiCreatePackVersionRequest): Promise<types.PublicApiCreatePackVersionResponse>;
    createPackRelease(packId: number, params: {} | undefined, payload: types.PublicApiCreatePackReleaseRequest): Promise<types.PublicApiPackRelease>;
    listPackReleases(packId: number, params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackReleaseList>;
    setPackLiveVersion(packId: number, params: {} | undefined, payload: types.PublicApiSetPackLiveVersionRequest): Promise<types.PublicApiSetPackLiveVersionResponse>;
    setPackSystemConnection(packId: number, params: {} | undefined, payload: types.PublicApiSetPackSystemConnectionRequest): Promise<types.PublicApiPackSystemConnection>;
    deletePackSystemConnection(packId: number, params?: {}): Promise<types.PublicApiDeletePackSystemConnectionResponse>;
    getPackSystemConnection(packId: number, params?: {}): Promise<types.PublicApiPackSystemConnection>;
    getPackPermissions(packId: number, params?: {}): Promise<types.PublicApiPackPermissionList>;
    addPackPermission(packId: number, params: {} | undefined, payload: types.PublicApiAddPackPermissionRequest): Promise<types.PublicApiAddPackPermissionResponse>;
    deletePackPermission(packId: number, permissionId: string, params?: {}): Promise<types.PublicApiDeletePackPermissionResponse>;
    uploadPackAsset(packId: number, params: {} | undefined, payload: types.PublicApiUploadPackAssetRequest): Promise<types.PublicApiPackAssetUploadInfo>;
    uploadPackSourceCode(packId: number, params: {} | undefined, payload: types.PublicApiUploadPackSourceCodeRequest): Promise<types.PublicApiPackSourceCodeUploadInfo>;
    packAssetUploadComplete(packId: number, packAssetId: string, packAssetType: types.PublicApiPackAssetType, params?: {}): Promise<types.PublicApiPackAssetUploadCompleteResponse>;
    packSourceCodeUploadComplete(packId: number, packVersion: string, params: {} | undefined, payload: types.PublicApiPackSourceCodeUploadCompleteRequest): Promise<types.PublicApiPackSourceCodeUploadCompleteResponse>;
    getPackSourceCode(packId: number, packVersion: string, params?: {}): Promise<types.PublicApiPackSourceCodeInfo>;
    listPackListings(params?: {
        limit?: number;
        pageToken?: string;
    }): Promise<types.PublicApiPackListingList>;
}
