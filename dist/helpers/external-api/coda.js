"use strict";
/* eslint-disable */
/**
 * @file TypeScript SDK for Coda API. This file is autogenerated from the API's OpenAPI specification,
 * available at https://coda.io/developers/apis/v1
 *
 * Version: v1
 * Hash: c17f33bab1c1496bf73356d09380fa0a04e074f97741adc801db545ea8db0026
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
require("es6-promise/auto");
require("isomorphic-fetch");
const url_1 = require("../url");
class Client {
    constructor(protocolAndHost, apiKey, userAgent = 'Coda-Typescript-API-Client') {
        this.protocolAndHost = protocolAndHost;
        this.apiKey = apiKey;
        this.userAgent = userAgent;
    }
    async listCategories(params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/categories`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listDocs(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async createDoc(params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async getDoc(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async deleteDoc(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'DELETE',
        });
        return response.json();
    }
    async getSharingMetadata(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/metadata`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async getPermissions(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async addPermission(docId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async deletePermission(docId, permissionId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions/${permissionId}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'DELETE',
        });
        return response.json();
    }
    async publishDoc(docId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/publish`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'PUT',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async unpublishDoc(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/publish`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'DELETE',
        });
        return response.json();
    }
    async listPages(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/pages`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async getPage(docId, pageIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/pages/${pageIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async updatePage(docId, pageIdOrName, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/pages/${pageIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'PUT',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async listTables(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async getTable(docId, tableIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listColumns(docId, tableIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/columns`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listRows(docId, tableIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async upsertRows(docId, tableIdOrName, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async deleteRows(docId, tableIdOrName, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'DELETE',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async getRow(docId, tableIdOrName, rowIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async updateRow(docId, tableIdOrName, rowIdOrName, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'PUT',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async deleteRow(docId, tableIdOrName, rowIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'DELETE',
        });
        return response.json();
    }
    async pushButton(docId, tableIdOrName, rowIdOrName, columnIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}/buttons/${columnIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
        });
        return response.json();
    }
    async getColumn(docId, tableIdOrName, columnIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/columns/${columnIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listFormulas(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/formulas`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async getFormula(docId, formulaIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/formulas/${formulaIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listControls(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/controls`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async getControl(docId, controlIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/docs/${docId}/controls/${controlIdOrName}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async whoami(params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/whoami`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async resolveBrowserLink(url, params = {}) {
        const allParams = {
            ...params,
            url,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/resolveBrowserLink`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async getMutationStatus(requestId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/mutationStatus/${requestId}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listDocAnalytics(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/analytics/docs`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listWorkspaceMembers(workspaceId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/users`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async changeUserRole(workspaceId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/users/role`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async listWorkspaceRoleActivity(workspaceId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/roles`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listPacks(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async createPack(params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async getPack(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async updatePack(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'PATCH',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async listPackVersions(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async registerPackVersion(packId, packVersion, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/register`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async packVersionUploadComplete(packId, packVersion, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/uploadComplete`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async createPackRelease(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/releases`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async listPackReleases(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/releases`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async setPackLiveVersion(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/liveVersion`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'PUT',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async setPackSystemConnection(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'PUT',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async deletePackSystemConnection(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'DELETE',
        });
        return response.json();
    }
    async getPackSystemConnection(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async getPackPermissions(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/permissions`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async addPackPermission(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/permissions`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async deletePackPermission(packId, permissionId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/permissions/${permissionId}`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'DELETE',
        });
        return response.json();
    }
    async uploadPackAsset(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/uploadAsset`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async uploadPackSourceCode(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/uploadSourceCode`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async packAssetUploadComplete(packId, packAssetId, packAssetType, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/assets/${packAssetId}/assetType/${packAssetType}/uploadComplete`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
        });
        return response.json();
    }
    async packSourceCodeUploadComplete(packId, packVersion, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/sourceCode/uploadComplete`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'POST',
            body: JSON.stringify(payload),
        });
        return response.json();
    }
    async getPackSourceCode(packId, packVersion, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/sourceCode`, allParams);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
    async listPackListings(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = url_1.withQueryParams(`${this.protocolAndHost}/apis/v1/packs/listings`, pageToken ? { pageToken } : rest);
        const response = await fetch(codaUrl, {
            headers: {
                Authorization: `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method: 'GET',
        });
        return response.json();
    }
}
exports.Client = Client;
