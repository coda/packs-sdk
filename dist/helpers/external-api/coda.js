"use strict";
/* eslint-disable */
/**
 * @file TypeScript SDK for Coda API. This file is autogenerated from the API's OpenAPI specification,
 * available at https://coda.io/developers/apis/v1
 *
 * Version: v1
 * Hash: 3cb65a92b168c432b6eb8cad28cd0cc16911c3536d86f2d256c7ddb6007de8ad
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.isResponseError = exports.ResponseError = void 0;
require("es6-promise/auto");
require("cross-fetch/polyfill");
const url_1 = require("../url");
class ResponseError extends Error {
    constructor(response) {
        super(response.statusText);
        this.response = response;
    }
}
exports.ResponseError = ResponseError;
function isResponseError(err) {
    return err instanceof ResponseError;
}
exports.isResponseError = isResponseError;
class Client {
    constructor({ apiToken, protocolAndHost = 'https://coda.io', userAgent = 'Coda-Typescript-API-Client', }) {
        this.protocolAndHost = protocolAndHost;
        this.apiToken = apiToken;
        this.userAgent = userAgent;
    }
    async _makeRequest(method, url, body) {
        const response = await fetch(url, {
            headers: {
                Authorization: `Bearer ${this.apiToken}`,
                'Content-Type': 'application/json',
                'User-Agent': this.userAgent,
            },
            method,
            body,
        });
        if (response.status >= 400) {
            throw new ResponseError(response);
        }
        return response.json();
    }
    async listCategories(params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/categories`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async listDocs(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async createDoc(params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async getDocsCount(params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/count`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async getDoc(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async deleteDoc(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}`, allParams);
        return this._makeRequest('DELETE', codaUrl);
    }
    async getSharingMetadata(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/metadata`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async getPermissions(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async addPermission(docId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async deletePermission(docId, permissionId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/acl/permissions/${permissionId}`, allParams);
        return this._makeRequest('DELETE', codaUrl);
    }
    async publishDoc(docId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/publish`, allParams);
        return this._makeRequest('PUT', codaUrl, JSON.stringify(payload));
    }
    async unpublishDoc(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/publish`, allParams);
        return this._makeRequest('DELETE', codaUrl);
    }
    async listPages(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/pages`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async getPage(docId, pageIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/pages/${pageIdOrName}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async updatePage(docId, pageIdOrName, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/pages/${pageIdOrName}`, allParams);
        return this._makeRequest('PUT', codaUrl, JSON.stringify(payload));
    }
    async listTables(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async getTable(docId, tableIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async listColumns(docId, tableIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/columns`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listRows(docId, tableIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async upsertRows(docId, tableIdOrName, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async deleteRows(docId, tableIdOrName, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows`, allParams);
        return this._makeRequest('DELETE', codaUrl, JSON.stringify(payload));
    }
    async getRow(docId, tableIdOrName, rowIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async updateRow(docId, tableIdOrName, rowIdOrName, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`, allParams);
        return this._makeRequest('PUT', codaUrl, JSON.stringify(payload));
    }
    async deleteRow(docId, tableIdOrName, rowIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}`, allParams);
        return this._makeRequest('DELETE', codaUrl);
    }
    async pushButton(docId, tableIdOrName, rowIdOrName, columnIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/rows/${rowIdOrName}/buttons/${columnIdOrName}`, allParams);
        return this._makeRequest('POST', codaUrl);
    }
    async getColumn(docId, tableIdOrName, columnIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/tables/${tableIdOrName}/columns/${columnIdOrName}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async listFormulas(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/formulas`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async getFormula(docId, formulaIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/formulas/${formulaIdOrName}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async listControls(docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/controls`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async getControl(docId, controlIdOrName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/controls/${controlIdOrName}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async whoami(params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/whoami`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async resolveBrowserLink(url, params = {}) {
        const allParams = {
            ...params,
            url,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/resolveBrowserLink`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async getMutationStatus(requestId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/mutationStatus/${requestId}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async triggerWebhookAutomation(docId, ruleId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/docs/${docId}/hooks/automation/${ruleId}`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async listDocAnalytics(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/analytics/docs`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listDocAnalyticsDeprecated(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/analytics/docs/legacy`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listDocAnalyticsSummary(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/analytics/docs/summary`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listPackAnalytics(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/analytics/packs`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listPackAnalyticsSummary(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/analytics/packs/summary`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listPackFormulaAnalytics(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/analytics/packs/${packId}/formulas`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listWorkspaceMembers(workspaceId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/users`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async changeUserRole(workspaceId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/users/role`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async listWorkspaceRoleActivity(workspaceId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/workspaces/${workspaceId}/roles`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listPacks(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async createPack(params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async getPack(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async updatePack(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}`, allParams);
        return this._makeRequest('PATCH', codaUrl, JSON.stringify(payload));
    }
    async deletePack(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}`, allParams);
        return this._makeRequest('DELETE', codaUrl);
    }
    async listPackVersions(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async getNextPackVersion(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/nextVersion`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async getPackVersionDiffs(packId, basePackVersion, targetPackVersion, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${basePackVersion}/diff/${targetPackVersion}`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async registerPackVersion(packId, packVersion, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/register`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async packVersionUploadComplete(packId, packVersion, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/uploadComplete`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async createPackRelease(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/releases`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async listPackReleases(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/releases`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async setPackOauthConfig(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/oauthConfig`, allParams);
        return this._makeRequest('PUT', codaUrl, JSON.stringify(payload));
    }
    async getPackOauthConfig(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/oauthConfig`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async setPackSystemConnection(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
        return this._makeRequest('PUT', codaUrl, JSON.stringify(payload));
    }
    async patchPackSystemConnection(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
        return this._makeRequest('PATCH', codaUrl, JSON.stringify(payload));
    }
    async getPackSystemConnection(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/systemConnection`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async getPackPermissions(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/permissions`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async addPackPermission(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/permissions`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async deletePackPermission(packId, permissionId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/permissions/${permissionId}`, allParams);
        return this._makeRequest('DELETE', codaUrl);
    }
    async listPackMakers(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/makers`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async addPackMaker(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/maker`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async deletePackMaker(packId, loginId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/maker/${loginId}`, allParams);
        return this._makeRequest('DELETE', codaUrl);
    }
    async listPackCategories(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/categories`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async addPackCategory(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/category`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async deletePackCategory(packId, categoryName, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/category/${categoryName}`, allParams);
        return this._makeRequest('DELETE', codaUrl);
    }
    async uploadPackAsset(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/uploadAsset`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async uploadPackSourceCode(packId, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/uploadSourceCode`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async packAssetUploadComplete(packId, packAssetId, packAssetType, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/assets/${packAssetId}/assetType/${packAssetType}/uploadComplete`, allParams);
        return this._makeRequest('POST', codaUrl);
    }
    async packSourceCodeUploadComplete(packId, packVersion, params = {}, payload) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/sourceCode/uploadComplete`, allParams);
        return this._makeRequest('POST', codaUrl, JSON.stringify(payload));
    }
    async getPackSourceCode(packId, packVersion, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/versions/${packVersion}/sourceCode`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async listPackListings(params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/listings`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async getPackListing(packId, params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/listing`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
    async listPackLogs(packId, docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/docs/${docId}/logs`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async listGroupedPackLogs(packId, docId, params = {}) {
        const allParams = {
            ...params,
        };
        const { pageToken, ...rest } = allParams;
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/${packId}/docs/${docId}/groupedLogs`, pageToken ? { pageToken } : rest);
        return this._makeRequest('GET', codaUrl);
    }
    async getPackCount(params = {}) {
        const allParams = {
            ...params,
        };
        const codaUrl = (0, url_1.withQueryParams)(`${this.protocolAndHost}/apis/v1/packs/count`, allParams);
        return this._makeRequest('GET', codaUrl);
    }
}
exports.Client = Client;
