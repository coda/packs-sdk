[
  {
    "triggerTokens": [
      "addFormula:string",
      "addStringFormula",
      "makeStringFormula",
      "StringFormula",
      "addFormula"
    ],
    "content": "Adds a Coda formula which will return a text string in the doc.",
    "code": "pack.addFormula({\n  name: \"<User-visible name of formula>\",\n  description: \"<Help text for the formula>\",\n  parameters: [\n    coda.makeParameter({\n      type: coda.ParameterType.String,\n      name: \"<User-visible name of parameter>\",\n      description: \"<Help text for the parameter>\",\n    }),\n    // Add more parameters here and in the array below.\n  ],\n  resultType: coda.ValueType.String,\n  execute: async function ([param], context) {\n    return \"Hello \" + param;\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:array",
      "addArrayFormula",
      "makeArrayFormula",
      "ArrayFormula"
    ],
    "content": "Adds a Coda formula which will return a text string in the doc.",
    "code": "pack.addFormula({\n  name: \"<User-visible name of formula>\",\n  description: \"<Help text for the formula>\",\n  parameters: [\n    coda.makeParameter({\n      type: coda.ParameterType.String,\n      name: \"<User-visible name of parameter>\",\n      description: \"<Help text for the parameter>\",\n    }),\n    // Add more parameters here and in the array below.\n  ],\n  resultType: coda.ValueType.Array,\n  items: {\n    type: coda.ValueType.String,\n  },\n  execute: async function ([param], context) {\n    return [\"Hello\", param];\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:boolean",
      "addBooleanFormula",
      "makeBooleanFormula",
      "BooleanFormula"
    ],
    "content": "Adds a Coda formula which will return true or false in the doc.",
    "code": "pack.addFormula({\n  name: \"<User-visible name of formula>\",\n  description: \"<Help text for the formula>\",\n  parameters: [\n    coda.makeParameter({\n      type: coda.ParameterType.String,\n      name: \"<User-visible name of parameter>\",\n      description: \"<Help text for the parameter>\",\n    }),\n    // Add more parameters here and in the array below.\n  ],\n  resultType: coda.ValueType.Boolean,\n  execute: async function ([param], context) {\n    return param === \"true\";\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:number",
      "addNumericFormula",
      "makeNumericFormula",
      "NumericFormula"
    ],
    "content": "Adds a Coda formula which will return a number in the doc.",
    "code": "pack.addFormula({\n  name: \"<User-visible name of formula>\",\n  description: \"<Help text for the formula>\",\n  parameters: [\n    coda.makeParameter({\n      type: coda.ParameterType.String,\n      name: \"<User-visible name of parameter>\",\n      description: \"<Help text for the parameter>\",\n    }),\n    // Add more parameters here and in the array below.\n  ],\n  resultType: coda.ValueType.Number,\n  execute: async function ([param], context) {\n    return param.length;\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:object",
      "addObjectFormula",
      "makeObjectFormula",
      "ObjectFormula"
    ],
    "content": "Adds a Coda formula which will return an object in the doc.",
    "code": "const MySchema = coda.makeObjectSchema({\n  properties: {\n    property1: {type: coda.ValueType.Number},\n    property2: {type: coda.ValueType.String},\n    // Add more properties here.\n  },\n  id: \"property1\", // Which property above is a unique ID.\n  primary: \"property2\", // Which property above to display by default.\n  identity: {\n    name: \"<User-visible name>\",\n  },\n});\n\npack.addFormula({\n  name: \"<User-visible name of formula>\",\n  description: \"<Help text for the formula>\",\n  parameters: [\n    coda.makeParameter({\n      type: coda.ParameterType.String,\n      name: \"<User-visible name of parameter>\",\n      description: \"<Help text for the parameter>\",\n    }),\n    // Add more parameters here and in the array below.\n  ],\n  resultType: coda.ValueType.Object,\n  schema: MySchema,\n  execute: async function ([param], context) {\n    return {\n      property1: 123,\n      property2: param,\n    };\n  },\n});"
  },
  {
    "triggerTokens": [
      "addColumnFormat",
      "makeColumnFormat",
      "ColumnFormat"
    ],
    "content": "Adds a custom column type that you apply to any column in any Coda table.",
    "code": "pack.addColumnFormat({\n  name: \"<User-visible name>\",\n  instructions: \"<Help text for the format>\",\n  formulaName: \"<Name of the formula to run>\",\n  formulaNamespace: \"Deprecated\", // Will be removed shortly\n});"
  },
  {
    "triggerTokens": [
      "setUserAuthentication",
      "addUserAuthentication",
      "UserAuthentication"
    ],
    "content": "Sets per-user authentication for the Pack.",
    "code": "pack.setUserAuthentication({\n  type: coda.AuthenticationType.HeaderBearerToken,\n});"
  },
  {
    "triggerTokens": [
      "setUserAuthentication:OAuth2",
      "OAuth2Authentication"
    ],
    "content": "Sets per-user OAuth2 authentication for the Pack.",
    "code": "// When registering your app in the API's developer console set the redirect URL\n// to: https://coda.io/packsAuth/oauth2\n// After building your Pack, remember to visit the Settings tab to set your\n// client ID and secret.\npack.setUserAuthentication({\n  type: coda.AuthenticationType.OAuth2,\n  // The following two URLs are will be found in the API's documentation.\n  authorizationUrl: \"<Authorization URL>\",\n  tokenUrl: \"<Token URL>\",\n});"
  },
  {
    "triggerTokens": [
      "setSystemAuthentication",
      "addSystemAuthentication",
      "SystemAuthentication"
    ],
    "content": "Sets system-wide authentication for the Pack.",
    "code": "pack.setSystemAuthentication({\n  type: coda.AuthenticationType.HeaderBearerToken,\n});"
  },
  {
    "triggerTokens": [
      "addNetworkDomain",
      "makeNetworkDomain",
      "NetworkDomain"
    ],
    "content": "Allows the pack to make requests to listed domains.",
    "code": "pack.addNetworkDomain(\"<Domain name>\");"
  },
  {
    "triggerTokens": [
      "makeParameter:string",
      "makeStringParameter",
      "addStringParameter",
      "StringParameter"
    ],
    "content": "Creates a string parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.String,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:boolean",
      "makeBooleanParameter",
      "addBooleanParameter",
      "BooleanParameter"
    ],
    "content": "Creates a boolean parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Boolean,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:date",
      "makeDateParameter",
      "addDateParameter",
      "DateParameter"
    ],
    "content": "Creates a date parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Date,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:html",
      "makeHtmlParameter",
      "addHtmlParameter",
      "HtmlParameter"
    ],
    "content": "Creates a html parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Html,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:image",
      "makeImageParameter",
      "addImageParameter",
      "ImageParameter"
    ],
    "content": "Creates a image parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Image,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:number",
      "makeNumberParameter",
      "addNumberParameter",
      "NumberParameter"
    ],
    "content": "Creates a number parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Number,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:string[]",
      "makeStringArrayParameter",
      "addStringArrayParameter",
      "StringArrayParameter"
    ],
    "content": "Creates a string array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.StringArray,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:boolean[]",
      "makeBooleanArrayParameter",
      "addBooleanArrayParameter",
      "BooleanArrayParameter"
    ],
    "content": "Creates a boolean array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.BooleanArray,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:date[]",
      "makeDateArrayParameter",
      "addDateArrayParameter",
      "DateArrayParameter"
    ],
    "content": "Creates a date array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.DateArray,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:html[]",
      "makeHtmlArrayParameter",
      "addHtmlArrayParameter",
      "HtmlArrayParameter"
    ],
    "content": "Creates a html array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.HtmlArray,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:image[]",
      "makeImageArrayParameter",
      "addImageArrayParameter",
      "ImageArrayParameter"
    ],
    "content": "Creates a image array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.ImageArray,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:number[]",
      "makeNumberArrayParameter",
      "addNumberArrayParameter",
      "NumberArrayParameter"
    ],
    "content": "Creates a number array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.NumberArray,\n  name: \"<User-visible name of parameter>\",\n  description: \"<Help text for the parameter>\",\n}),"
  },
  {
    "triggerTokens": [
      "addSyncTable",
      "addSyncTable",
      "SyncTable"
    ],
    "content": "Adds a sync table.",
    "code": "const MySchema = coda.makeObjectSchema({\n  properties: {\n    property1: {type: coda.ValueType.Number},\n    property2: {type: coda.ValueType.String},\n    // Add more properties here.\n  },\n  id: \"property1\", // Which property above is a unique ID.\n  primary: \"property2\", // Which property above to display by default.\n  identity: {\n    name: \"<User-visible name for the column containing the schema>\",\n  },\n});\n\npack.addSyncTable({\n  name: \"<User-visible name for the sync table>\",\n  identityName: \"<User-visible name for the column containing the schema>\",\n  schema: MySchema,\n  formula: {\n    name: \"<Name of the sync formula, not show to the user>\",\n    description: \"<Help text for the sync formula, not show to the user>\",\n    parameters: [\n      coda.makeParameter({\n        type: coda.ParameterType.String,\n        name: \"<User-visible name of parameter>\",\n        description: \"<Help text for the parameter>\",\n      }),\n      // Add more parameters here and in the array below.\n    ],\n    execute: async function ([param], context) {\n      let url = \"<URL to pull data from>\";\n      let response = await context.fetcher.fetch({\n        method: \"GET\",\n        url: url,\n      });\n      let items = response.body.items;\n      // Adjust the items to fit the schema if required.\n      return {\n        result: items,\n      }\n    },\n  },\n});"
  },
  {
    "triggerTokens": [
      "addDynamicSyncTable",
      "makeDynamicSyncTable",
      "DynamicSyncTable"
    ],
    "content": "Adds a dynamic sync table.",
    "code": "pack.addDynamicSyncTable({\n  name: \"<User-visible name for the sync table>\",\n  getName: async function (context) {\n    let datasourceUrl = context.sync!.dynamicUrl!;\n    // TODO: Fetch metadata about the data source and return the name.\n    return \"<Datasource Name>\";\n  },\n  getSchema: async function (context) {\n    let datasourceUrl = context.sync!.dynamicUrl!;\n    // TODO: Fetch metadata about the data source and get the list of fields.\n    let properties = {\n      // TODO: Create a property for each field.\n    };\n    let id = \"<Determine the field containing a unique ID>\";\n    let primary = \"<Determine the field containing the display value>\";\n    let featured = [\n      // TODO: Determine which fields to show in the table by default.\n    ];\n    return coda.makeSchema({\n      type: coda.ValueType.Array,\n      items: coda.makeObjectSchema({\n        identity: {\n          name: \"<User-visible name for the column containing the schema>\",\n          dynamicUrl: datasourceUrl,\n        },\n        properties: properties,\n        id: id,\n        primary: primary,\n        featured: featured,\n      }),\n    });\n  },\n  getDisplayUrl: async function (context) {\n    return context.sync!.dynamicUrl!;\n  },\n  formula: {\n    name: \"<Name of the sync formula, not show to the user>\",\n    description: \"<Help text for the sync formula, not show to the user>\",\n    parameters: [\n      coda.makeParameter({\n        type: coda.ParameterType.String,\n        name: \"<User-visible name of parameter>\",\n        description: \"<Help text for the parameter>\",\n      }),\n      // Add more parameters here and in the array below.\n    ],\n    execute: async function ([param], context) {\n      let datasourceUrl = context.sync!.dynamicUrl!;\n      let url = \"<URL to pull data from>\";\n      let response = await context.fetcher.fetch({\n        method: \"GET\",\n        url: url,\n      });\n      let items = response.body.items;\n      // Adjust the items to fit the schema if required.\n      return {\n        result: items,\n      }\n    },\n  },\n});"
  },
  {
    "triggerTokens": [
      "makeObjectSchema",
      "addObjectSchema",
      "ObjectSchema"
    ],
    "content": "Creates an object schema definition.",
    "code": "const MySchema = coda.makeObjectSchema({\n  properties: {\n    property1: {type: coda.ValueType.Number},\n    property2: {type: coda.ValueType.String},\n    // Add more properties here.\n  },\n  id: \"property1\", // Which property above is a unique ID.\n  primary: \"property2\", // Which property above to display by default.\n  identity: {\n    name: \"<User-visible name of the schema>\",\n  },\n});"
  },
  {
    "triggerTokens": [
      "fetch:get"
    ],
    "content": "Fetches data from an API.",
    "code": "let response = await context.fetcher.fetch({\n  method: \"GET\",\n  url: \"<The URL to fetch>\",\n});\nlet data = response.body;"
  },
  {
    "triggerTokens": [
      "fetch:post"
    ],
    "content": "Send data to an API.",
    "code": "let payload = {\n  // Whatever JSON structure the API expects.\n};\nlet response = await context.fetcher.fetch({\n  method: \"POST\",\n  url: \"<The URL to send the request to>\",\n  body: JSON.stringify(payload),\n});\nlet data = response.body;"
  }
]