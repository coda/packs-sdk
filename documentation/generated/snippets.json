[
  {
    "triggerTokens": [
      "addFormula:string",
      "addStringFormula",
      "makeStringFormula",
      "StringFormula",
      "addFormula"
    ],
    "content": "Adds a Coda formula which will return a text string in the doc.",
    "code": "pack.addFormula({\n  name: \"${1:MyFormula}\",\n  description: \"${2:My description.}\",\n  parameters: [\n    // TODO: Add parameters.\n  ],\n  resultType: coda.ValueType.String,\n  execute: async function (args, context) {\n    let [\n      // TODO: Unpack the parameter values.\n    ] = args;\n    // TODO: Compute the result.\n    return \"\";\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:array",
      "addArrayFormula",
      "makeArrayFormula",
      "ArrayFormula"
    ],
    "content": "Adds a Coda formula which will return a text string in the doc.",
    "code": "pack.addFormula({\n  name: \"${1:MyFormula}\",\n  description: \"${2:My description.}\",\n  parameters: [\n    // TODO: Add parameters.\n  ],\n  resultType: coda.ValueType.Array,\n  items: coda.makeSchema({\n    type: coda.ValueType.String,\n  }),\n  execute: async function (args, context) {\n    let [\n      // TODO: Unpack the parameter values.\n    ] = args;\n    // TODO: Compute the result.\n    return [];\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:boolean",
      "addBooleanFormula",
      "makeBooleanFormula",
      "BooleanFormula"
    ],
    "content": "Adds a Coda formula which will return true or false in the doc.",
    "code": "pack.addFormula({\n  name: \"${1:MyFormula}\",\n  description: \"${2:My description.}\",\n  parameters: [\n    // TODO: Add parameters.\n  ],\n  resultType: coda.ValueType.Boolean,\n  execute: async function (args, context) {\n    let [\n      // TODO: Unpack the parameter values.\n    ] = args;\n    // TODO: Compute the result.\n    return true;\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:number",
      "addNumericFormula",
      "makeNumericFormula",
      "NumericFormula"
    ],
    "content": "Adds a Coda formula which will return a number in the doc.",
    "code": "pack.addFormula({\n  name: \"${1:MyFormula}\",\n  description: \"${2:My description.}\",\n  parameters: [\n    // TODO: Add parameters.\n  ],\n  resultType: coda.ValueType.Number,\n  execute: async function (args, context) {\n    let [\n      // TODO: Unpack the parameter values.\n    ] = args;\n    // TODO: Compute the result.\n    return 0;\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:object",
      "addObjectFormula",
      "makeObjectFormula",
      "ObjectFormula"
    ],
    "content": "Adds a Coda formula which will return an object in the doc.",
    "code": "pack.addFormula({\n  name: \"${1:MyFormula}\",\n  description: \"${2:My description.}\",\n  parameters: [\n    // TODO: Add parameters.\n  ],\n  resultType: coda.ValueType.Object,\n  schema: ${3:MySchema},\n  execute: async function (args, context) {\n    let [\n      // TODO: Unpack the parameter values.\n    ] = args;\n    // TODO: Compute the result.\n    return {};\n  },\n});"
  },
  {
    "triggerTokens": [
      "addFormula:action",
      "addAction",
      "addButton"
    ],
    "content": "Adds an action formula which can be used in a button or automation.",
    "code": "pack.addFormula({\n  name: \"${1:MyAction}\",\n  description: \"${2:My description.}\",\n  parameters: [\n    // TODO: Add parameters.\n  ],\n  resultType: coda.ValueType.String,\n  isAction: true,\n  execute: async function (args, context) {\n    let [\n      // TODO: Unpack the parameter values.\n    ] = args;\n    // TODO: Do something.\n    return \"OK\";\n  },\n});"
  },
  {
    "triggerTokens": [
      "addColumnFormat",
      "makeColumnFormat",
      "ColumnFormat"
    ],
    "content": "Adds a custom column type that you apply to any column in any Coda table.",
    "code": "pack.addColumnFormat({\n  name: \"${1:My Column Format}\",\n  instructions: \"${2:My description.}\",\n  formulaName: \"${3:MyFormula}\",\n  matchers: [\n    // TODO: If formatting a URL, add a regular expression that matches it.\n  ],\n});"
  },
  {
    "triggerTokens": [
      "card"
    ],
    "content": "Adds a everything you need for a card (schema, formula, and column format).",
    "code": "// A schema that defines the data shown in the card.\nconst ${1:Thing}Schema = coda.makeObjectSchema({\n  properties: {\n    ${2:name}: { type: coda.ValueType.String },\n    ${3:description}: { type: coda.ValueType.String },\n    ${4:picture}: {\n      type: coda.ValueType.String,\n      codaType: coda.ValueHintType.ImageReference,\n    },\n    ${5:link}: {\n      type: coda.ValueType.String,\n      codaType: coda.ValueHintType.Url,\n    },\n    // TODO: Add more properties.\n  },\n  displayProperty: \"$2\",\n  titleProperty: \"$2\",\n  snippetProperty: \"$3\",\n  imageProperty: \"$4\",\n  linkProperty: \"$5\",\n  subtitleProperties: [\n    // TODO: List the properties to show under the title.\n  ],\n});\n\n// A formula that accepts a URL and returns an object matching the schema above.\npack.addFormula({\n  name: \"$1\",\n  description: \"${6:My description.}\",\n  parameters: [\n    coda.makeParameter({\n      type: coda.ParameterType.String,\n      name: \"url\",\n      description: \"${6: My parameter description.}\",\n    }),\n  ],\n  resultType: coda.ValueType.Object,\n  schema: $1Schema,\n  execute: async function (args, context) {\n    let [url] = args;\n    // TODO: Fetch information about the item represented by the URL.\n    return {\n      // TODO: Populate with fetched information.\n      $5: url,\n    };\n  },\n});\n\n// A column format that defines which URL patterns the formula should match.\npack.addColumnFormat({\n  name: \"$1\",\n  instructions: \"${7:My instructions.}\",\n  formulaName: \"$1\",\n  matchers: [\n    new RegExp(\"${8:https://example.com/.*}\"),\n    // TODO: Optionally add more URL patterns.\n  ],\n});"
  },
  {
    "triggerTokens": [
      "setUserAuthentication",
      "addUserAuthentication",
      "UserAuthentication"
    ],
    "content": "Sets per-user authentication for the Pack.",
    "code": "pack.setUserAuthentication({\n  type: coda.AuthenticationType.HeaderBearerToken,\n});"
  },
  {
    "triggerTokens": [
      "setUserAuthentication:OAuth2",
      "OAuth2Authentication"
    ],
    "content": "Sets per-user OAuth2 authentication for the Pack.",
    "code": "// When registering your app in the API's developer console set the redirect URL\n// to: https://coda.io/packsAuth/oauth2/{PACK ID}\n// After building your Pack, remember to visit the Settings tab to set your\n// client ID and secret.\npack.setUserAuthentication({\n  type: coda.AuthenticationType.OAuth2,\n  // The following two URLs are will be found in the API's documentation.\n  authorizationUrl: \"${1:https://example.com/authorize}\",\n  tokenUrl: \"${2:https://example.com/token}\",\n});"
  },
  {
    "triggerTokens": [
      "setSystemAuthentication",
      "addSystemAuthentication",
      "SystemAuthentication"
    ],
    "content": "Sets system-wide authentication for the Pack.",
    "code": "pack.setSystemAuthentication({\n  type: coda.AuthenticationType.HeaderBearerToken,\n});"
  },
  {
    "triggerTokens": [
      "addNetworkDomain",
      "makeNetworkDomain",
      "NetworkDomain"
    ],
    "content": "Allows the pack to make requests to listed domains.",
    "code": "pack.addNetworkDomain(\"${1:example.com}\");"
  },
  {
    "triggerTokens": [
      "makeParameter:string",
      "makeStringParameter",
      "addStringParameter",
      "StringParameter"
    ],
    "content": "Creates a string parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.String,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:boolean",
      "makeBooleanParameter",
      "addBooleanParameter",
      "BooleanParameter"
    ],
    "content": "Creates a boolean parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Boolean,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:date",
      "makeDateParameter",
      "addDateParameter",
      "DateParameter"
    ],
    "content": "Creates a date parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Date,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:html",
      "makeHtmlParameter",
      "addHtmlParameter",
      "HtmlParameter"
    ],
    "content": "Creates a html parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Html,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:image",
      "makeImageParameter",
      "addImageParameter",
      "ImageParameter"
    ],
    "content": "Creates an image parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Image,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:file",
      "makeFileParameter",
      "addFileParameter",
      "FileParameter"
    ],
    "content": "Creates a file parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.File,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:number",
      "makeNumberParameter",
      "addNumberParameter",
      "NumberParameter"
    ],
    "content": "Creates a number parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.Number,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:string[]",
      "makeStringArrayParameter",
      "addStringArrayParameter",
      "StringArrayParameter"
    ],
    "content": "Creates a string array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.StringArray,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:boolean[]",
      "makeBooleanArrayParameter",
      "addBooleanArrayParameter",
      "BooleanArrayParameter"
    ],
    "content": "Creates a boolean array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.BooleanArray,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:date[]",
      "makeDateArrayParameter",
      "addDateArrayParameter",
      "DateArrayParameter"
    ],
    "content": "Creates a date array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.DateArray,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:html[]",
      "makeHtmlArrayParameter",
      "addHtmlArrayParameter",
      "HtmlArrayParameter"
    ],
    "content": "Creates a html array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.HtmlArray,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:image[]",
      "makeImageArrayParameter",
      "addImageArrayParameter",
      "ImageArrayParameter"
    ],
    "content": "Creates a image array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.ImageArray,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "makeParameter:number[]",
      "makeNumberArrayParameter",
      "addNumberArrayParameter",
      "NumberArrayParameter"
    ],
    "content": "Creates a number array parameter.",
    "code": "coda.makeParameter({\n  type: coda.ParameterType.NumberArray,\n  name: \"${1:myParameter}\",\n  description: \"${2:My description.}\",\n}),"
  },
  {
    "triggerTokens": [
      "addSyncTable",
      "addSyncTable",
      "SyncTable"
    ],
    "content": "Adds a sync table.",
    "code": "pack.addSyncTable({\n  name: \"${1:MyThings}\",\n  description: \"${2:Table description.}\",\n  identityName: \"$1\",\n  schema: ${3:MySchema},\n  formula: {\n    name: \"Sync$1\",\n    description: \"Syncs the data.\",\n    parameters: [\n      // TODO: Add parameters.\n    ],\n    execute: async function (args, context) {\n      let [\n        // TODO: Unpack the parameter values.\n      ] = args;\n      // TODO: Fetch the rows.\n      let rows = [];\n      for (let row of rows) {\n        // TODO: If required, adjust the row to match the schema.\n      }\n      return {\n        result: rows,\n      };\n    },\n  },\n});"
  },
  {
    "triggerTokens": [
      "addDynamicSyncTable",
      "makeDynamicSyncTable",
      "DynamicSyncTable"
    ],
    "content": "Adds a dynamic sync table.",
    "code": "pack.addDynamicSyncTable({\n  name: \"${1:MyThings}\",\n  description: \"${2:My description.}\",\n  identityName: \"${1}\",\n  listDynamicUrls: async function (context) {\n    // TODO: Fetch the list of datasets the user can connect to.\n    let datasets = [];\n    // TODO: Replace \"name\" and \"url\" below with correct JSON keys.\n    return coda.autocompleteSearchObjects(undefined, datasets, \"name\", \"url\");\n  },\n  getName: async function (context) {\n    let datasetUrl = context.sync.dynamicUrl;\n    // TODO: Fetch metadata about the dataset and return the name.\n    return \"Table Name\";\n  },\n  getSchema: async function (context) {\n    let datasetUrl = context.sync.dynamicUrl;\n    // TODO: Fetch metadata about the dataset and use it to construct a schema.\n    let schema = coda.makeObjectSchema({\n      properties: {},\n      displayProperty: \"\",\n      idProperty: \"\",\n      featuredProperties: [],\n    });\n    return schema;\n  },\n  getDisplayUrl: async function (context) {\n    let datasetUrl = context.sync.dynamicUrl;\n    // TODO: Fetch metadata about the dataset and return a user-friendly URL.\n    return \"\";\n  },\n  formula: {\n    name: \"Sync$1\",\n    description: \"Syncs the data.\",\n    parameters: [\n      // TODO: Add parameters.\n    ],\n    execute: async function (args, context) {\n      let datasetUrl = context.sync.dynamicUrl!;\n      let [\n        // TODO: Unpack the parameter values.\n      ] = args;\n      // TODO: Fetch the rows.\n      let rows = [];\n      for (let row of rows) {\n        // TODO: If required, adjust the row to match the schema.\n      }\n      return {\n        result: rows,\n      };\n    },\n  },\n});"
  },
  {
    "triggerTokens": [
      "makeObjectSchema",
      "addObjectSchema",
      "ObjectSchema"
    ],
    "content": "Creates an object schema definition.",
    "code": "const ${1:Thing}Schema = coda.makeObjectSchema({\n  properties: {\n    ${2:name}: { type: coda.ValueType.String },\n    // TODO: Add more properties.\n  },\n  displayProperty: \"$2\",\n});"
  },
  {
    "triggerTokens": [
      "makeObjectSchema:sync"
    ],
    "content": "Creates an object schema definition for a sync table.",
    "code": "const ${1:Thing}Schema = coda.makeObjectSchema({\n  properties: {\n    ${2:name}: { type: coda.ValueType.String },\n    ${3:thingId}: { type: coda.ValueType.String },\n    // TODO: Add more properties.\n  },\n  displayProperty: \"$2\",\n  idProperty: \"$3\",\n  featuredProperties: [\n    // TODO: Add featured properties.\n  ],\n});"
  },
  {
    "triggerTokens": [
      "makeObjectSchema:card"
    ],
    "content": "Creates an object schema definition for a card.",
    "code": "const ${1:Thing}Schema = coda.makeObjectSchema({\n  properties: {\n    ${2:name}: { type: coda.ValueType.String },\n    ${3:description}: { type: coda.ValueType.String },\n    ${4:picture}: {\n      type: coda.ValueType.String,\n      codaType: coda.ValueHintType.ImageReference,\n    },\n    ${5:link}: {\n      type: coda.ValueType.String,\n      codaType: coda.ValueHintType.Url,\n    },\n    // TODO: Add more properties.\n  },\n  displayProperty: \"$2\",\n  titleProperty: \"$2\",\n  snippetProperty: \"$3\",\n  imageProperty: \"$4\",\n  linkProperty: \"$5\",\n  subtitleProperties: [\n    // TODO: List the properties to show under the title.\n  ],\n});"
  },
  {
    "triggerTokens": [
      "fetch:get"
    ],
    "content": "Fetches data from an API.",
    "code": "let response = await context.fetcher.fetch({\n  method: \"GET\",\n  url: \"${1:https://example.com}\",\n});\nlet data = response.body;"
  },
  {
    "triggerTokens": [
      "fetch:post"
    ],
    "content": "Send data to an API.",
    "code": "let payload = {\n  // TODO: Construct the JSON that the API expects.\n};\nlet response = await context.fetcher.fetch({\n  method: \"POST\",\n  url: \"${1:https://example.com}\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  body: JSON.stringify(payload),\n});\nlet data = response.body;"
  }
]